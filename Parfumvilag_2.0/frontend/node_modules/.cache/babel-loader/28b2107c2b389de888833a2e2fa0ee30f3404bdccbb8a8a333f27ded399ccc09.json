{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KomPhone\\\\Desktop\\\\Parfumvilag_vegleges\\\\Parfumvilag_2.0\\\\frontend\\\\src\\\\components\\\\PerfumeCard.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/PerfumeCard.js\nimport React, { useState, useEffect, useContext } from \"react\"; // React és szükséges Hook-ok importálása\nimport { Link, useNavigate } from \"react-router-dom\"; // Navigációhoz szükséges komponensek\nimport { AuthContext } from \"../App\"; // Globális autentikációs kontextus importálása\nimport { getMyFavoriteIds, addFavorite, removeFavorite } from \"../services/savedPerfumeService\"; // Kedvencek kezeléséhez szükséges service függvények\nimport \"../style.css\"; // Stíluslap importálása\n\n// Egyszerűsített bejelentkezési felugró ablak komponens\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LoginPromptModal = ({\n  onClose,\n  onLoginRedirect\n}) => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-prompt-overlay\",\n    onClick: onClose\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-prompt\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"close-btn\",\n      onClick: onClose,\n      children: \"\\xD7\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Bejelentkez\\xE9s sz\\xFCks\\xE9ges\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Be kell jelentkezni a kedvencek kezel\\xE9s\\xE9hez.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center mt-3\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"login-btn me-2\",\n        onClick: onLoginRedirect,\n        children: [\" \", \"Bejelentkez\\xE9s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"cancel-btn\",\n        onClick: onClose,\n        children: [\" \", \"M\\xE9gse\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this)]\n}, void 0, true);\n\n// Parfüm kártya komponens definíciója\n// - `perfume`: A megjelenítendő parfüm adatait tartalmazó objektum.\n// - `onFavoriteChange`: Opcionális callback függvény, ami akkor hívódik meg, ha a kedvenc állapot változik.\n_c = LoginPromptModal;\nconst PerfumeCard = ({\n  perfume,\n  onFavoriteChange\n}) => {\n  _s();\n  // Parfüm tulajdonságainak destrukturálása alapértelmezett értékekkel, ha hiányoznak\n  const {\n    id,\n    name = \"Ismeretlen Parfüm\",\n    // Név, vagy alapértelmezett szöveg\n    brand_name: brand,\n    // Márkanév (átnevezve 'brand'-re)\n    price,\n    // Ár\n    image_url // Kép URL\n  } = perfume || {}; // Ha a 'perfume' objektum undefined, üres objektumot használ\n\n  // Autentikációs kontextus és navigációs hook használata\n  const {\n    isLoggedIn,\n    token,\n    logout\n  } = useContext(AuthContext); // Bejelentkezési állapot, token és kijelentkeztető függvény a kontextusból\n  const navigate = useNavigate(); // Programozott navigációhoz\n\n  // Komponens belső állapotai\n  const [isFavorite, setIsFavorite] = useState(false); // Tárolja, hogy az adott parfüm kedvenc-e\n  const [showLoginPrompt, setShowLoginPrompt] = useState(false); // Bejelentkezési felugró ablak láthatósága\n  const [loadingFavorite, setLoadingFavorite] = useState(false); // Töltési állapot a kedvenc gomb műveleteihez\n\n  // Ár formázása forintra\n  const formattedPrice = () => {\n    if (price === undefined || price === null) {\n      return \"Ár információ nem elérhető\"; // Ha nincs ár adat\n    }\n    // Nemzetközi számformázó használata HUF pénznemmel, tizedesjegyek nélkül\n    return new Intl.NumberFormat(\"hu-HU\", {\n      style: \"currency\",\n      currency: \"HUF\",\n      maximumFractionDigits: 0\n    }).format(price);\n  };\n\n  // Effect hook: a komponens betöltődésekor ellenőrzi, hogy a parfüm kedvenc-e\n  useEffect(() => {\n    let isMounted = true; // Zászló, hogy megakadályozzuk az állapotfrissítést, ha a komponens már nincs a DOM-ban\n\n    // Aszinkron függvény a kedvenc állapot ellenőrzésére\n    const checkIfFavorite = async () => {\n      // Ha nincs bejelentkezve a felhasználó, vagy hiányzik a parfüm ID, nem kell ellenőrizni\n      if (!isLoggedIn || !id) {\n        if (isMounted) setIsFavorite(false); // Biztosítjuk, hogy ilyenkor false legyen az állapot\n        return;\n      }\n\n      // Az inicializáló ellenőrzéshez itt nem kell vizuális töltésjelző\n\n      try {\n        // console.log(`PerfumeCard (${id}): Checking favorite status...`);\n        const favoriteIds = await getMyFavoriteIds(); // Felhasználó kedvenc parfümjeinek ID-listájának lekérése\n        if (isMounted) {\n          // Csak akkor frissítjük az állapotot, ha a komponens még be van illesztve\n          const fav = favoriteIds.includes(id); // Ellenőrzi, hogy az aktuális parfüm ID szerepel-e a listában\n          // console.log(`PerfumeCard (${id}): Is favorite? ${fav}`);\n          setIsFavorite(fav); // Beállítja a lokális 'isFavorite' állapotot\n        }\n      } catch (error) {\n        console.error(`PerfumeCard (${id}): Hiba a kedvenc állapot ellenőrzésekor:`, error);\n\n        // Token hiba ellenőrzése (pl. lejárt token)\n        if (error && error.error === \"Token érvénytelen!\") {\n          console.warn(`PerfumeCard (${id}): Invalid token detected during check. Logging out.`);\n          if (isMounted) {\n            logout(); // Kijelentkeztetés a kontextus segítségével\n            // Itt nem szükséges navigálni, a védett útvonalak vagy az App.js kezeli\n          }\n        } else if (isMounted) {\n          // Egyéb hibák kezelése (pl. hálózati hiba) - naplózás vagy figyelmen kívül hagyás\n          console.error(`PerfumeCard (${id}): Other error checking favorite status:`, error.message);\n          // Nem autentikációs hibák esetén is 'false'-ra állítjuk a kedvenc állapotot\n          setIsFavorite(false);\n        }\n      } finally {\n        // Itt nincs mit visszaállítani a töltési állapotnál az inicializálásnál\n      }\n    };\n    checkIfFavorite(); // Az ellenőrző függvény futtatása\n\n    // Tisztító függvény: beállítja a 'isMounted' zászlót false-ra, amikor a komponens eltávolításra kerül\n    return () => {\n      isMounted = false;\n    };\n    // Függőségek: az effect újra lefut, ha az 'id', 'isLoggedIn', 'token' vagy 'logout' megváltozik\n  }, [id, isLoggedIn, token, logout]);\n\n  // Kedvenc állapot váltását kezelő függvény (szív ikonra kattintáskor)\n  const handleToggleFavorite = async e => {\n    e.preventDefault(); // Megakadályozza az alapértelmezett eseményt (pl. Link követése)\n    e.stopPropagation(); // Megállítja az esemény továbbterjedését a szülő elemek felé\n\n    // Ha a felhasználó nincs bejelentkezve, megjelenítjük a bejelentkezési ablakot\n    if (!isLoggedIn) {\n      setShowLoginPrompt(true);\n      return;\n    }\n\n    // Ha már folyamatban van egy kedvenc művelet, vagy nincs parfüm ID, nem csinálunk semmit\n    if (loadingFavorite || !id) return;\n    setLoadingFavorite(true); // Töltési állapot bekapcsolása (pl. gomb letiltása)\n\n    try {\n      let nowFavorite; // Az új kedvenc állapot tárolására\n\n      // Ha jelenleg kedvenc, akkor eltávolítjuk\n      if (isFavorite) {\n        await removeFavorite(id); // API hívás az eltávolításhoz\n        nowFavorite = false; // Az új állapot false lesz\n      } else {\n        // Ha nem kedvenc, akkor hozzáadjuk\n        await addFavorite(id); // API hívás a hozzáadáshoz\n        nowFavorite = true; // Az új állapot true lesz\n      }\n\n      // Lokális állapot frissítése az új értékkel\n      setIsFavorite(nowFavorite);\n\n      // Ha van külső callback függvény (onFavoriteChange), meghívjuk az új állapottal\n      if (onFavoriteChange) {\n        onFavoriteChange(id, nowFavorite);\n      }\n    } catch (error) {\n      console.error(`PerfumeCard (${id}): Hiba a kedvencek kezelésekor:`, error);\n\n      // Token hiba ellenőrzése és kezelése (kijelentkeztetés)\n      if (error && error.error === \"Token érvénytelen!\") {\n        console.warn(`PerfumeCard (${id}): Invalid token detected on toggle. Logging out.`);\n        logout(); // Kijelentkeztetés\n      } else {\n        // Egyéb hibák esetén alert üzenet megjelenítése\n        alert(`Hiba: ${error.message || \"Nem sikerült módosítani a kedvencet.\"}`);\n      }\n    } finally {\n      setLoadingFavorite(false); // Töltési állapot kikapcsolása minden esetben (siker, hiba)\n    }\n  };\n\n  // Komponens JSX struktúrája\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"perfume-card h-100\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(Link, {\n        to: `/parfume/${id}` // Dinamikus útvonal a parfüm ID-val\n        ,\n        className: \"perfume-card-link d-flex flex-column h-100\" // Flexbox a belső elrendezéshez\n        ,\n        style: {\n          textDecoration: \"none\",\n          color: \"inherit\"\n        } // Alapértelmezett link stílusok felülírása\n        ,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: image_url || \"https://via.placeholder.com/220x200?text=Parfüm\" // Kép URL vagy placeholder\n          ,\n          alt: name // Kép alt textje\n          ,\n          className: \"perfume-card-img\" // Stílusosztály a képhez\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"perfume-card-body d-flex flex-column flex-grow-1 justify-content-between\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"perfume-card-title\",\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 15\n            }, this), brand && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"perfume-card-subtitle text-muted small mb-1\",\n              children: brand\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"perfume-card-text\",\n              children: formattedPrice()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 15\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `favorite-btn ${isFavorite ? \"active\" : \"\"} ${\n        // Dinamikus osztályok: 'active' ha kedvenc\n        loadingFavorite ? \"disabled\" : \"\" // 'disabled' ha töltési állapotban van\n        }`,\n        onClick: handleToggleFavorite // Kattintás eseménykezelő\n        ,\n        disabled: loadingFavorite // Gomb letiltása API hívás alatt\n        ,\n        \"aria-label\":\n        // Akadálymentesítés: képernyőolvasóknak szánt címke\n        isFavorite ? \"Eltávolítás a kedvencekből\" : \"Hozzáadás a kedvencekhez\"\n        // A szív ikon (♥) a CSS ::before pszeudo-elemmel kerül hozzáadásra\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), showLoginPrompt && /*#__PURE__*/_jsxDEV(LoginPromptModal, {\n      onClose: () => setShowLoginPrompt(false) // Bezárás eseménykezelő\n      ,\n      onLoginRedirect: () => navigate(\"/bejelentkezes\") // Bejelentkezés oldalra átirányítás\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(PerfumeCard, \"npvI5YEhKJckWOWY+OE9P/KmAD4=\", false, function () {\n  return [useNavigate];\n});\n_c2 = PerfumeCard;\nexport default PerfumeCard;\nvar _c, _c2;\n$RefreshReg$(_c, \"LoginPromptModal\");\n$RefreshReg$(_c2, \"PerfumeCard\");","map":{"version":3,"names":["React","useState","useEffect","useContext","Link","useNavigate","AuthContext","getMyFavoriteIds","addFavorite","removeFavorite","jsxDEV","_jsxDEV","Fragment","_Fragment","LoginPromptModal","onClose","onLoginRedirect","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","PerfumeCard","perfume","onFavoriteChange","_s","id","name","brand_name","brand","price","image_url","isLoggedIn","token","logout","navigate","isFavorite","setIsFavorite","showLoginPrompt","setShowLoginPrompt","loadingFavorite","setLoadingFavorite","formattedPrice","undefined","Intl","NumberFormat","style","currency","maximumFractionDigits","format","isMounted","checkIfFavorite","favoriteIds","fav","includes","error","console","warn","message","handleToggleFavorite","e","preventDefault","stopPropagation","nowFavorite","alert","to","textDecoration","color","src","alt","disabled","_c2","$RefreshReg$"],"sources":["C:/Users/KomPhone/Desktop/Parfumvilag_vegleges/Parfumvilag_2.0/frontend/src/components/PerfumeCard.js"],"sourcesContent":["// frontend/src/components/PerfumeCard.js\r\nimport React, { useState, useEffect, useContext } from \"react\"; // React és szükséges Hook-ok importálása\r\nimport { Link, useNavigate } from \"react-router-dom\"; // Navigációhoz szükséges komponensek\r\nimport { AuthContext } from \"../App\"; // Globális autentikációs kontextus importálása\r\nimport {\r\n  getMyFavoriteIds,\r\n  addFavorite,\r\n  removeFavorite,\r\n} from \"../services/savedPerfumeService\"; // Kedvencek kezeléséhez szükséges service függvények\r\nimport \"../style.css\"; // Stíluslap importálása\r\n\r\n// Egyszerűsített bejelentkezési felugró ablak komponens\r\nconst LoginPromptModal = ({ onClose, onLoginRedirect }) => (\r\n  <>\r\n    {/* Áttetsző háttér, amelyre kattintva bezáródik a modal */}\r\n    <div className=\"login-prompt-overlay\" onClick={onClose} />\r\n    {/* A modal tényleges tartalma */}\r\n    <div className=\"login-prompt\">\r\n      <button className=\"close-btn\" onClick={onClose}>\r\n        ×\r\n      </button>\r\n      <h3>Bejelentkezés szükséges</h3>\r\n      <p>Be kell jelentkezni a kedvencek kezeléséhez.</p>\r\n      <div className=\"d-flex justify-content-center mt-3\">\r\n        {\" \"}\r\n        {/* Gombok középre igazítva */}\r\n        <button className=\"login-btn me-2\" onClick={onLoginRedirect}>\r\n          {\" \"}\r\n          {/* Bejelentkezés gomb */}\r\n          Bejelentkezés\r\n        </button>\r\n        <button className=\"cancel-btn\" onClick={onClose}>\r\n          {\" \"}\r\n          {/* Mégse gomb */}\r\n          Mégse\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </>\r\n);\r\n\r\n// Parfüm kártya komponens definíciója\r\n// - `perfume`: A megjelenítendő parfüm adatait tartalmazó objektum.\r\n// - `onFavoriteChange`: Opcionális callback függvény, ami akkor hívódik meg, ha a kedvenc állapot változik.\r\nconst PerfumeCard = ({ perfume, onFavoriteChange }) => {\r\n  // Parfüm tulajdonságainak destrukturálása alapértelmezett értékekkel, ha hiányoznak\r\n  const {\r\n    id,\r\n    name = \"Ismeretlen Parfüm\", // Név, vagy alapértelmezett szöveg\r\n    brand_name: brand, // Márkanév (átnevezve 'brand'-re)\r\n    price, // Ár\r\n    image_url, // Kép URL\r\n  } = perfume || {}; // Ha a 'perfume' objektum undefined, üres objektumot használ\r\n\r\n  // Autentikációs kontextus és navigációs hook használata\r\n  const { isLoggedIn, token, logout } = useContext(AuthContext); // Bejelentkezési állapot, token és kijelentkeztető függvény a kontextusból\r\n  const navigate = useNavigate(); // Programozott navigációhoz\r\n\r\n  // Komponens belső állapotai\r\n  const [isFavorite, setIsFavorite] = useState(false); // Tárolja, hogy az adott parfüm kedvenc-e\r\n  const [showLoginPrompt, setShowLoginPrompt] = useState(false); // Bejelentkezési felugró ablak láthatósága\r\n  const [loadingFavorite, setLoadingFavorite] = useState(false); // Töltési állapot a kedvenc gomb műveleteihez\r\n\r\n  // Ár formázása forintra\r\n  const formattedPrice = () => {\r\n    if (price === undefined || price === null) {\r\n      return \"Ár információ nem elérhető\"; // Ha nincs ár adat\r\n    }\r\n    // Nemzetközi számformázó használata HUF pénznemmel, tizedesjegyek nélkül\r\n    return new Intl.NumberFormat(\"hu-HU\", {\r\n      style: \"currency\",\r\n      currency: \"HUF\",\r\n      maximumFractionDigits: 0,\r\n    }).format(price);\r\n  };\r\n\r\n  // Effect hook: a komponens betöltődésekor ellenőrzi, hogy a parfüm kedvenc-e\r\n  useEffect(() => {\r\n    let isMounted = true; // Zászló, hogy megakadályozzuk az állapotfrissítést, ha a komponens már nincs a DOM-ban\r\n\r\n    // Aszinkron függvény a kedvenc állapot ellenőrzésére\r\n    const checkIfFavorite = async () => {\r\n      // Ha nincs bejelentkezve a felhasználó, vagy hiányzik a parfüm ID, nem kell ellenőrizni\r\n      if (!isLoggedIn || !id) {\r\n        if (isMounted) setIsFavorite(false); // Biztosítjuk, hogy ilyenkor false legyen az állapot\r\n        return;\r\n      }\r\n\r\n      // Az inicializáló ellenőrzéshez itt nem kell vizuális töltésjelző\r\n\r\n      try {\r\n        // console.log(`PerfumeCard (${id}): Checking favorite status...`);\r\n        const favoriteIds = await getMyFavoriteIds(); // Felhasználó kedvenc parfümjeinek ID-listájának lekérése\r\n        if (isMounted) {\r\n          // Csak akkor frissítjük az állapotot, ha a komponens még be van illesztve\r\n          const fav = favoriteIds.includes(id); // Ellenőrzi, hogy az aktuális parfüm ID szerepel-e a listában\r\n          // console.log(`PerfumeCard (${id}): Is favorite? ${fav}`);\r\n          setIsFavorite(fav); // Beállítja a lokális 'isFavorite' állapotot\r\n        }\r\n      } catch (error) {\r\n        console.error(\r\n          `PerfumeCard (${id}): Hiba a kedvenc állapot ellenőrzésekor:`,\r\n          error\r\n        );\r\n\r\n        // Token hiba ellenőrzése (pl. lejárt token)\r\n        if (error && error.error === \"Token érvénytelen!\") {\r\n          console.warn(\r\n            `PerfumeCard (${id}): Invalid token detected during check. Logging out.`\r\n          );\r\n          if (isMounted) {\r\n            logout(); // Kijelentkeztetés a kontextus segítségével\r\n            // Itt nem szükséges navigálni, a védett útvonalak vagy az App.js kezeli\r\n          }\r\n        } else if (isMounted) {\r\n          // Egyéb hibák kezelése (pl. hálózati hiba) - naplózás vagy figyelmen kívül hagyás\r\n          console.error(\r\n            `PerfumeCard (${id}): Other error checking favorite status:`,\r\n            error.message\r\n          );\r\n          // Nem autentikációs hibák esetén is 'false'-ra állítjuk a kedvenc állapotot\r\n          setIsFavorite(false);\r\n        }\r\n      } finally {\r\n        // Itt nincs mit visszaállítani a töltési állapotnál az inicializálásnál\r\n      }\r\n    };\r\n\r\n    checkIfFavorite(); // Az ellenőrző függvény futtatása\r\n\r\n    // Tisztító függvény: beállítja a 'isMounted' zászlót false-ra, amikor a komponens eltávolításra kerül\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n    // Függőségek: az effect újra lefut, ha az 'id', 'isLoggedIn', 'token' vagy 'logout' megváltozik\r\n  }, [id, isLoggedIn, token, logout]);\r\n\r\n  // Kedvenc állapot váltását kezelő függvény (szív ikonra kattintáskor)\r\n  const handleToggleFavorite = async (e) => {\r\n    e.preventDefault(); // Megakadályozza az alapértelmezett eseményt (pl. Link követése)\r\n    e.stopPropagation(); // Megállítja az esemény továbbterjedését a szülő elemek felé\r\n\r\n    // Ha a felhasználó nincs bejelentkezve, megjelenítjük a bejelentkezési ablakot\r\n    if (!isLoggedIn) {\r\n      setShowLoginPrompt(true);\r\n      return;\r\n    }\r\n\r\n    // Ha már folyamatban van egy kedvenc művelet, vagy nincs parfüm ID, nem csinálunk semmit\r\n    if (loadingFavorite || !id) return;\r\n\r\n    setLoadingFavorite(true); // Töltési állapot bekapcsolása (pl. gomb letiltása)\r\n\r\n    try {\r\n      let nowFavorite; // Az új kedvenc állapot tárolására\r\n\r\n      // Ha jelenleg kedvenc, akkor eltávolítjuk\r\n      if (isFavorite) {\r\n        await removeFavorite(id); // API hívás az eltávolításhoz\r\n        nowFavorite = false; // Az új állapot false lesz\r\n      } else {\r\n        // Ha nem kedvenc, akkor hozzáadjuk\r\n        await addFavorite(id); // API hívás a hozzáadáshoz\r\n        nowFavorite = true; // Az új állapot true lesz\r\n      }\r\n\r\n      // Lokális állapot frissítése az új értékkel\r\n      setIsFavorite(nowFavorite);\r\n\r\n      // Ha van külső callback függvény (onFavoriteChange), meghívjuk az új állapottal\r\n      if (onFavoriteChange) {\r\n        onFavoriteChange(id, nowFavorite);\r\n      }\r\n    } catch (error) {\r\n      console.error(\r\n        `PerfumeCard (${id}): Hiba a kedvencek kezelésekor:`,\r\n        error\r\n      );\r\n\r\n      // Token hiba ellenőrzése és kezelése (kijelentkeztetés)\r\n      if (error && error.error === \"Token érvénytelen!\") {\r\n        console.warn(\r\n          `PerfumeCard (${id}): Invalid token detected on toggle. Logging out.`\r\n        );\r\n        logout(); // Kijelentkeztetés\r\n      } else {\r\n        // Egyéb hibák esetén alert üzenet megjelenítése\r\n        alert(\r\n          `Hiba: ${error.message || \"Nem sikerült módosítani a kedvencet.\"}`\r\n        );\r\n      }\r\n    } finally {\r\n      setLoadingFavorite(false); // Töltési állapot kikapcsolása minden esetben (siker, hiba)\r\n    }\r\n  };\r\n\r\n  // Komponens JSX struktúrája\r\n  return (\r\n    <>\r\n      {/* Parfüm kártya fő konténere */}\r\n      <div className=\"perfume-card h-100\">\r\n        {\" \"}\r\n        {/* `h-100` a magasság kitöltéséhez (Bootstrap) */}\r\n        {/* Link, amely a kártya fő tartalmát foglalja magába és a részletes oldalra navigál */}\r\n        <Link\r\n          to={`/parfume/${id}`} // Dinamikus útvonal a parfüm ID-val\r\n          className=\"perfume-card-link d-flex flex-column h-100\" // Flexbox a belső elrendezéshez\r\n          style={{ textDecoration: \"none\", color: \"inherit\" }} // Alapértelmezett link stílusok felülírása\r\n        >\r\n          {/* Parfüm képe */}\r\n          <img\r\n            src={image_url || \"https://via.placeholder.com/220x200?text=Parfüm\"} // Kép URL vagy placeholder\r\n            alt={name} // Kép alt textje\r\n            className=\"perfume-card-img\" // Stílusosztály a képhez\r\n          />\r\n          {/* Kártya törzse */}\r\n          <div className=\"perfume-card-body d-flex flex-column flex-grow-1 justify-content-between\">\r\n            {\" \"}\r\n            {/* Flexbox a tartalom függőleges elosztásához */}\r\n            {/* Felső rész: Cím, Márka, Ár */}\r\n            <div>\r\n              <h3 className=\"perfume-card-title\">{name}</h3>\r\n              {/* Márka megjelenítése, ha van */}\r\n              {brand && (\r\n                <p className=\"perfume-card-subtitle text-muted small mb-1\">\r\n                  {brand}\r\n                </p>\r\n              )}\r\n              <p className=\"perfume-card-text\">{formattedPrice()}</p>{\" \"}\r\n              {/* Formázott ár */}\r\n            </div>\r\n            {/* Alsó rész: Ide kerülhetnének további információk vagy gombok */}\r\n          </div>\r\n        </Link>\r\n        {/* Kedvenc gomb (CSS segítségével pozícionálva a kártya sarkába) */}\r\n        <button\r\n          className={`favorite-btn ${isFavorite ? \"active\" : \"\"} ${\r\n            // Dinamikus osztályok: 'active' ha kedvenc\r\n            loadingFavorite ? \"disabled\" : \"\" // 'disabled' ha töltési állapotban van\r\n          }`}\r\n          onClick={handleToggleFavorite} // Kattintás eseménykezelő\r\n          disabled={loadingFavorite} // Gomb letiltása API hívás alatt\r\n          aria-label={\r\n            // Akadálymentesítés: képernyőolvasóknak szánt címke\r\n            isFavorite\r\n              ? \"Eltávolítás a kedvencekből\"\r\n              : \"Hozzáadás a kedvencekhez\"\r\n          }\r\n          // A szív ikon (♥) a CSS ::before pszeudo-elemmel kerül hozzáadásra\r\n        />\r\n      </div>\r\n\r\n      {/* Bejelentkezési felugró ablak (feltételesen jelenik meg) */}\r\n      {showLoginPrompt && (\r\n        <LoginPromptModal\r\n          onClose={() => setShowLoginPrompt(false)} // Bezárás eseménykezelő\r\n          onLoginRedirect={() => navigate(\"/bejelentkezes\")} // Bejelentkezés oldalra átirányítás\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PerfumeCard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}