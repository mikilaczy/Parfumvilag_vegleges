{"ast":null,"code":"import axios from \"axios\"; // Axios importálása HTTP kérésekhez\n\n// Parfümökkel kapcsolatos API végpontok alap URL-je\nconst API_BASE_URL = \"http://localhost:5000/api\";\n\n// Összes parfüm lekérdezése szűrési, rendezési és lapozási paraméterekkel\nexport const getAllPerfumes = async ({\n  query = \"\",\n  // Keresőkifejezés (név, márka, leírás)\n  brand = \"\",\n  // Márka ID vagy név szűréshez\n  note = \"\",\n  // Illatjegy ID vagy név szűréshez\n  gender = \"\",\n  // Nem (male, female, unisex) szűréshez\n  sort = \"name-asc\",\n  // Rendezési szempont (pl. 'name-asc', 'price-desc')\n  min_price,\n  // Minimális ár szűréshez\n  max_price,\n  // Maximális ár szűréshez\n  page = 1,\n  // Jelenlegi oldalszám\n  per_page = 24 // Oldalankénti elemek száma\n}) => {\n  try {\n    // GET kérés küldése az '/perfumes/all' végpontra a megadott paraméterekkel\n    const response = await axios.get(`${API_BASE_URL}/perfumes/all`, {\n      params: {\n        // Paraméterek átadása a query stringben\n        query,\n        brand,\n        note,\n        gender,\n        sort,\n        min_price,\n        max_price,\n        page,\n        per_page\n      }\n    });\n    // Visszaadja a kapott adatokat (parfümök listája, összes oldalszám stb.)\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    // Hiba kezelése: logolás és specifikus vagy általános hibaüzenet továbbdobása\n    const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || \"Nem sikerült betölteni a parfümök listáját!\";\n    console.error(\"Hiba a getAllPerfumes-ben:\", errorMessage);\n    throw new Error(errorMessage);\n  }\n};\n\n// Véletlenszerű parfümök lekérdezése adott limitált számban\nexport const getRandomPerfumes = async (limit = 5) => {\n  // Alapértelmezett limit: 5\n  try {\n    // GET kérés küldése a '/perfumes/random' végpontra a limit paraméterrel\n    const response = await axios.get(`${API_BASE_URL}/perfumes/random`, {\n      params: {\n        limit\n      }\n    });\n    // Visszaadja a kapott véletlenszerű parfümök listáját\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    // Hiba kezelése: logolás és általános hibaüzenet továbbdobása\n    console.error(\"Error fetching random perfumes:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    throw new Error(\"Nem sikerült betölteni a véletlen parfümöket.\");\n  }\n};\n\n// Kiemelt parfümök lekérdezése (a backend logikája dönti el, mik ezek)\nexport const getFeaturedPerfumes = async () => {\n  try {\n    // GET kérés küldése a '/perfumes/featured' végpontra\n    const response = await axios.get(`${API_BASE_URL}/perfumes/featured`);\n    console.log(\"API válasz (getFeaturedPerfumes):\", response.data); // Fejlesztési célú logolás\n    // Visszaadja a kapott kiemelt parfümök listáját\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    // Hiba kezelése: logolás és specifikus vagy általános hibaüzenet továbbdobása\n    const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || \"Nem sikerült betölteni a kiemelt parfümök listáját!\";\n    console.error(\"Hiba a getFeaturedPerfumes-ben:\", errorMessage);\n    throw new Error(errorMessage);\n  }\n};\n\n// Egy specifikus parfüm részletes adatainak lekérdezése ID alapján\nexport const getPerfumeById = async id => {\n  try {\n    // GET kérés küldése a '/perfumes/:id' végpontra\n    const response = await axios.get(`${API_BASE_URL}/perfumes/${id}`);\n    console.log(\"API válasz (getPerfumeById):\", response.data); // Fejlesztési célú logolás\n    // Visszaadja a kapott parfüm részletes adatait\n    return response.data;\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    // Hiba kezelése: logolás és specifikus vagy általános hibaüzenet továbbdobása\n    const errorMessage = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || \"Parfüm nem található!\";\n    console.error(\"Hiba a getPerfumeById-ben:\", errorMessage);\n    throw new Error(errorMessage);\n  }\n};\n\n// Kedvenc állapot váltása (hozzáadás/eltávolítás) egy parfümhöz\n// Figyelem: Ez a függvény feltételezi, hogy a tokent a localStorage-ban tároljuk és direktben használja.\n// Jobb megoldás lehet egy interceptor vagy a token központi kezelése.\nexport const toggleFavorite = async perfumeId => {\n  try {\n    // POST kérés küldése a '/api/favorites/toggle' végpontra (Figyelem: relatív URL és eltérő logika)\n    // Az Authorization fejlécben küldi a Bearer tokent\n    const response = await axios.post(\"/api/favorites/toggle\",\n    // Eltérő végpont, lehet, hogy a savedPerfumeService-be tartozna?\n    {\n      perfume_id: perfumeId\n    }, {\n      headers: {\n        // Token közvetlen beillesztése a localStorage-ból - nem a legjobb gyakorlat\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n      }\n    });\n    // Visszaadja a szerver válaszát (pl. sikerüzenet, új állapot)\n    return response.data;\n  } catch (error) {\n    // Hiba esetén továbbdobja a szerver által küldött hibaadatokat\n    throw error.response.data;\n  }\n};\n\n// Minimális és maximális ár lekérdezése az adatbázisban lévő parfümök alapján (szűréshez)\nexport const getPriceRange = async () => {\n  try {\n    // GET kérés küldése a '/perfumes/price-range' végpontra\n    const response = await axios.get(`${API_BASE_URL}/perfumes/price-range`);\n    // Visszaadja az árintervallumot: { minPrice: number, maxPrice: number }\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching price range:\", error); // Hiba logolása\n    // Hiba esetén egy alapértelmezett (széles) intervallumot ad vissza, hogy a szűrő működőképes maradjon\n    return {\n      minPrice: 0,\n      maxPrice: 100000\n    }; // Alapértelmezett fallback érték\n    // Alternatíva: Hibát dobni\n    // throw new Error(\"Nem sikerült lekérni az árintervallumot.\");\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","getAllPerfumes","query","brand","note","gender","sort","min_price","max_price","page","per_page","response","get","params","data","error","_error$response","_error$response$data","errorMessage","console","Error","getRandomPerfumes","limit","_error$response2","message","getFeaturedPerfumes","log","_error$response3","_error$response3$data","getPerfumeById","id","_error$response4","_error$response4$data","toggleFavorite","perfumeId","post","perfume_id","headers","Authorization","localStorage","getItem","getPriceRange","minPrice","maxPrice"],"sources":["C:/Users/KomPhone/Desktop/Parfumvilag_vegleges/Parfumvilag_2.0/frontend/src/services/perfumeService.js"],"sourcesContent":["import axios from \"axios\"; // Axios importálása HTTP kérésekhez\r\n\r\n// Parfümökkel kapcsolatos API végpontok alap URL-je\r\nconst API_BASE_URL = \"http://localhost:5000/api\";\r\n\r\n// Összes parfüm lekérdezése szűrési, rendezési és lapozási paraméterekkel\r\nexport const getAllPerfumes = async ({\r\n  query = \"\", // Keresőkifejezés (név, márka, leírás)\r\n  brand = \"\", // Márka ID vagy név szűréshez\r\n  note = \"\", // Illatjegy ID vagy név szűréshez\r\n  gender = \"\", // Nem (male, female, unisex) szűréshez\r\n  sort = \"name-asc\", // Rendezési szempont (pl. 'name-asc', 'price-desc')\r\n  min_price, // Minimális ár szűréshez\r\n  max_price, // Maximális ár szűréshez\r\n  page = 1, // Jelenlegi oldalszám\r\n  per_page = 24, // Oldalankénti elemek száma\r\n}) => {\r\n  try {\r\n    // GET kérés küldése az '/perfumes/all' végpontra a megadott paraméterekkel\r\n    const response = await axios.get(`${API_BASE_URL}/perfumes/all`, {\r\n      params: {\r\n        // Paraméterek átadása a query stringben\r\n        query,\r\n        brand,\r\n        note,\r\n        gender,\r\n        sort,\r\n        min_price,\r\n        max_price,\r\n        page,\r\n        per_page,\r\n      },\r\n    });\r\n    // Visszaadja a kapott adatokat (parfümök listája, összes oldalszám stb.)\r\n    return response.data;\r\n  } catch (error) {\r\n    // Hiba kezelése: logolás és specifikus vagy általános hibaüzenet továbbdobása\r\n    const errorMessage =\r\n      error.response?.data?.error ||\r\n      \"Nem sikerült betölteni a parfümök listáját!\";\r\n    console.error(\"Hiba a getAllPerfumes-ben:\", errorMessage);\r\n    throw new Error(errorMessage);\r\n  }\r\n};\r\n\r\n// Véletlenszerű parfümök lekérdezése adott limitált számban\r\nexport const getRandomPerfumes = async (limit = 5) => {\r\n  // Alapértelmezett limit: 5\r\n  try {\r\n    // GET kérés küldése a '/perfumes/random' végpontra a limit paraméterrel\r\n    const response = await axios.get(`${API_BASE_URL}/perfumes/random`, {\r\n      params: { limit },\r\n    });\r\n    // Visszaadja a kapott véletlenszerű parfümök listáját\r\n    return response.data;\r\n  } catch (error) {\r\n    // Hiba kezelése: logolás és általános hibaüzenet továbbdobása\r\n    console.error(\r\n      \"Error fetching random perfumes:\",\r\n      error.response?.data || error.message\r\n    );\r\n    throw new Error(\"Nem sikerült betölteni a véletlen parfümöket.\");\r\n  }\r\n};\r\n\r\n// Kiemelt parfümök lekérdezése (a backend logikája dönti el, mik ezek)\r\nexport const getFeaturedPerfumes = async () => {\r\n  try {\r\n    // GET kérés küldése a '/perfumes/featured' végpontra\r\n    const response = await axios.get(`${API_BASE_URL}/perfumes/featured`);\r\n    console.log(\"API válasz (getFeaturedPerfumes):\", response.data); // Fejlesztési célú logolás\r\n    // Visszaadja a kapott kiemelt parfümök listáját\r\n    return response.data;\r\n  } catch (error) {\r\n    // Hiba kezelése: logolás és specifikus vagy általános hibaüzenet továbbdobása\r\n    const errorMessage =\r\n      error.response?.data?.error ||\r\n      \"Nem sikerült betölteni a kiemelt parfümök listáját!\";\r\n    console.error(\"Hiba a getFeaturedPerfumes-ben:\", errorMessage);\r\n    throw new Error(errorMessage);\r\n  }\r\n};\r\n\r\n// Egy specifikus parfüm részletes adatainak lekérdezése ID alapján\r\nexport const getPerfumeById = async (id) => {\r\n  try {\r\n    // GET kérés küldése a '/perfumes/:id' végpontra\r\n    const response = await axios.get(`${API_BASE_URL}/perfumes/${id}`);\r\n    console.log(\"API válasz (getPerfumeById):\", response.data); // Fejlesztési célú logolás\r\n    // Visszaadja a kapott parfüm részletes adatait\r\n    return response.data;\r\n  } catch (error) {\r\n    // Hiba kezelése: logolás és specifikus vagy általános hibaüzenet továbbdobása\r\n    const errorMessage = error.response?.data?.error || \"Parfüm nem található!\";\r\n    console.error(\"Hiba a getPerfumeById-ben:\", errorMessage);\r\n    throw new Error(errorMessage);\r\n  }\r\n};\r\n\r\n// Kedvenc állapot váltása (hozzáadás/eltávolítás) egy parfümhöz\r\n// Figyelem: Ez a függvény feltételezi, hogy a tokent a localStorage-ban tároljuk és direktben használja.\r\n// Jobb megoldás lehet egy interceptor vagy a token központi kezelése.\r\nexport const toggleFavorite = async (perfumeId) => {\r\n  try {\r\n    // POST kérés küldése a '/api/favorites/toggle' végpontra (Figyelem: relatív URL és eltérő logika)\r\n    // Az Authorization fejlécben küldi a Bearer tokent\r\n    const response = await axios.post(\r\n      \"/api/favorites/toggle\", // Eltérő végpont, lehet, hogy a savedPerfumeService-be tartozna?\r\n      { perfume_id: perfumeId },\r\n      {\r\n        headers: {\r\n          // Token közvetlen beillesztése a localStorage-ból - nem a legjobb gyakorlat\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      }\r\n    );\r\n    // Visszaadja a szerver válaszát (pl. sikerüzenet, új állapot)\r\n    return response.data;\r\n  } catch (error) {\r\n    // Hiba esetén továbbdobja a szerver által küldött hibaadatokat\r\n    throw error.response.data;\r\n  }\r\n};\r\n\r\n// Minimális és maximális ár lekérdezése az adatbázisban lévő parfümök alapján (szűréshez)\r\nexport const getPriceRange = async () => {\r\n  try {\r\n    // GET kérés küldése a '/perfumes/price-range' végpontra\r\n    const response = await axios.get(`${API_BASE_URL}/perfumes/price-range`);\r\n    // Visszaadja az árintervallumot: { minPrice: number, maxPrice: number }\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching price range:\", error); // Hiba logolása\r\n    // Hiba esetén egy alapértelmezett (széles) intervallumot ad vissza, hogy a szűrő működőképes maradjon\r\n    return { minPrice: 0, maxPrice: 100000 }; // Alapértelmezett fallback érték\r\n    // Alternatíva: Hibát dobni\r\n    // throw new Error(\"Nem sikerült lekérni az árintervallumot.\");\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}