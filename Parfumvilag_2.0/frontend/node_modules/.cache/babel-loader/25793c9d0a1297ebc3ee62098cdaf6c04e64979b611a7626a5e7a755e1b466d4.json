{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = \"http://localhost:5000/api\";\nconst getAuthConfig = () => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    console.error(\"userService: No auth token found\");\n    return null; // Jelzi a hívónak, hogy nincs token\n  }\n  return {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      // Explicit JSON küldése\n      \"x-auth-token\": token\n    }\n  };\n};\nexport const getUser = async () => {\n  const config = getAuthConfig();\n  // Itt nem dobunk hibát, ha nincs token, mert lehet, hogy csak ellenőrizni akarjuk\n  // De a backendnek kellene 401-et adnia, ha kötelező a token\n\n  try {\n    // A config lehet null, ha nincs token, de a backendnek kell ezt kezelnie (authMiddleware)\n    const response = await axios.get(`${API_BASE_URL}/users/me`, config || {}); // Küldjük a configot, ha van\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response2;\n    console.error(\"getUser Error:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    // Dobd tovább a hibát, hogy a komponens tudja kezelni\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || new Error(error.message || \"Nem sikerült betölteni a felhasználó adatait!\");\n  }\n};\nexport const updateUser = async userData => {\n  const config = getAuthConfig();\n  if (!config) {\n    // Dobjunk hibát, mert a frissítéshez biztosan kell token\n    throw new Error(\"Nem sikerült hitelesíteni a felhasználót a frissítéshez.\");\n  }\n  try {\n    console.log(\"Sending update data:\", userData); // Log data being sent\n    const response = await axios.put(`${API_BASE_URL}/users/me`, userData, config);\n    console.log(\"Update response:\", response.data); // Log successful response\n    // Itt feltételezzük, hogy a backend a frissített user objektumot (vagy legalább egy sikeres üzenetet) ad vissza\n    // Ha a backend pl. csak { success: true } választ ad, akkor a hívónak újra kell fetch-elnie a usert\n    return response.data; // Return the whole response data\n  } catch (error) {\n    var _error$response3, _error$response4, _error$response4$data;\n    console.error(\"updateUser Error:\", ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    // Dobjuk tovább a backend hibaüzenetét, ha van, különben az általánosat\n    throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || \"Nem sikerült frissíteni a felhasználói adatokat!\");\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","getAuthConfig","token","localStorage","getItem","console","error","headers","getUser","config","response","get","data","_error$response","_error$response2","message","Error","updateUser","userData","log","put","_error$response3","_error$response4","_error$response4$data"],"sources":["C:/Users/KomPhone/Desktop/Parfumvilag2.0/Parfumvilag_2.0/frontend/src/services/userService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_BASE_URL = \"http://localhost:5000/api\";\r\n\r\nconst getAuthConfig = () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (!token) {\r\n    console.error(\"userService: No auth token found\");\r\n    return null; // Jelzi a hívónak, hogy nincs token\r\n  }\r\n  return {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\", // Explicit JSON küldése\r\n      \"x-auth-token\": token,\r\n    },\r\n  };\r\n};\r\n\r\nexport const getUser = async () => {\r\n  const config = getAuthConfig();\r\n  // Itt nem dobunk hibát, ha nincs token, mert lehet, hogy csak ellenőrizni akarjuk\r\n  // De a backendnek kellene 401-et adnia, ha kötelező a token\r\n\r\n  try {\r\n    // A config lehet null, ha nincs token, de a backendnek kell ezt kezelnie (authMiddleware)\r\n    const response = await axios.get(`${API_BASE_URL}/users/me`, config || {}); // Küldjük a configot, ha van\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"getUser Error:\", error.response?.data || error.message);\r\n    // Dobd tovább a hibát, hogy a komponens tudja kezelni\r\n    throw (\r\n      error.response?.data ||\r\n      new Error(\r\n        error.message || \"Nem sikerült betölteni a felhasználó adatait!\"\r\n      )\r\n    );\r\n  }\r\n};\r\n\r\nexport const updateUser = async (userData) => {\r\n  const config = getAuthConfig();\r\n  if (!config) {\r\n    // Dobjunk hibát, mert a frissítéshez biztosan kell token\r\n    throw new Error(\"Nem sikerült hitelesíteni a felhasználót a frissítéshez.\");\r\n  }\r\n\r\n  try {\r\n    console.log(\"Sending update data:\", userData); // Log data being sent\r\n    const response = await axios.put(\r\n      `${API_BASE_URL}/users/me`,\r\n      userData,\r\n      config\r\n    );\r\n    console.log(\"Update response:\", response.data); // Log successful response\r\n    // Itt feltételezzük, hogy a backend a frissített user objektumot (vagy legalább egy sikeres üzenetet) ad vissza\r\n    // Ha a backend pl. csak { success: true } választ ad, akkor a hívónak újra kell fetch-elnie a usert\r\n    return response.data; // Return the whole response data\r\n  } catch (error) {\r\n    console.error(\"updateUser Error:\", error.response?.data || error.message);\r\n    // Dobjuk tovább a backend hibaüzenetét, ha van, különben az általánosat\r\n    throw new Error(\r\n      error.response?.data?.error ||\r\n        \"Nem sikerült frissíteni a felhasználói adatokat!\"\r\n    );\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAC1B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACF,KAAK,EAAE;IACVG,OAAO,CAACC,KAAK,CAAC,kCAAkC,CAAC;IACjD,OAAO,IAAI,CAAC,CAAC;EACf;EACA,OAAO;IACLC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAAE;MACpC,cAAc,EAAEL;IAClB;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMM,OAAO,GAAG,MAAAA,CAAA,KAAY;EACjC,MAAMC,MAAM,GAAGR,aAAa,CAAC,CAAC;EAC9B;EACA;;EAEA,IAAI;IACF;IACA,MAAMS,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,GAAGX,YAAY,WAAW,EAAES,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5E,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAON,KAAK,EAAE;IAAA,IAAAO,eAAA,EAAAC,gBAAA;IACdT,OAAO,CAACC,KAAK,CAAC,gBAAgB,EAAE,EAAAO,eAAA,GAAAP,KAAK,CAACI,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBD,IAAI,KAAIN,KAAK,CAACS,OAAO,CAAC;IACtE;IACA,MACE,EAAAD,gBAAA,GAAAR,KAAK,CAACI,QAAQ,cAAAI,gBAAA,uBAAdA,gBAAA,CAAgBF,IAAI,KACpB,IAAII,KAAK,CACPV,KAAK,CAACS,OAAO,IAAI,+CACnB,CAAC;EAEL;AACF,CAAC;AAED,OAAO,MAAME,UAAU,GAAG,MAAOC,QAAQ,IAAK;EAC5C,MAAMT,MAAM,GAAGR,aAAa,CAAC,CAAC;EAC9B,IAAI,CAACQ,MAAM,EAAE;IACX;IACA,MAAM,IAAIO,KAAK,CAAC,0DAA0D,CAAC;EAC7E;EAEA,IAAI;IACFX,OAAO,CAACc,GAAG,CAAC,sBAAsB,EAAED,QAAQ,CAAC,CAAC,CAAC;IAC/C,MAAMR,QAAQ,GAAG,MAAMX,KAAK,CAACqB,GAAG,CAC9B,GAAGpB,YAAY,WAAW,EAC1BkB,QAAQ,EACRT,MACF,CAAC;IACDJ,OAAO,CAACc,GAAG,CAAC,kBAAkB,EAAET,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;IAChD;IACA;IACA,OAAOF,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAON,KAAK,EAAE;IAAA,IAAAe,gBAAA,EAAAC,gBAAA,EAAAC,qBAAA;IACdlB,OAAO,CAACC,KAAK,CAAC,mBAAmB,EAAE,EAAAe,gBAAA,GAAAf,KAAK,CAACI,QAAQ,cAAAW,gBAAA,uBAAdA,gBAAA,CAAgBT,IAAI,KAAIN,KAAK,CAACS,OAAO,CAAC;IACzE;IACA,MAAM,IAAIC,KAAK,CACb,EAAAM,gBAAA,GAAAhB,KAAK,CAACI,QAAQ,cAAAY,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBV,IAAI,cAAAW,qBAAA,uBAApBA,qBAAA,CAAsBjB,KAAK,KACzB,kDACJ,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}